pipeline {
  agent any  // Utilise votre agent Jenkins Alpine par d√©faut
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timeout(time: 20, unit: 'MINUTES')  // Augment√© car installation des outils
    timestamps()
  }

  environment {
    APP_NAME = "demo-app"
    BRANCH_NAME = env.BRANCH_NAME.replaceAll('/', '-')
    TEAM_EMAIL = 'koussougboss@gmail.com, huguesblakime@gmail.com'
    PYTHONPATH = "${WORKSPACE}"
  }

  stages {
    // √âtape 1: Installation des outils
    stage('Setup Environment') {
      steps {
        checkout scm
        sh '''
          # Installation de Python et des outils syst√®me
          apk add --no-cache python3 py3-pip python3-dev gcc musl-dev libffi-dev
          python3 -m ensurepip
          
          # Cr√©ation d'un lien symbolique pour python
          ln -sf python3 /usr/bin/python
          
          # Cr√©ation de l'environnement virtuel
          python -m venv venv
          
          # Activation de l'environnement virtuel et installation des packages
          . venv/bin/activate
          
          # Mise √† jour de pip dans le venv
          pip install --upgrade pip
          
          # Installation des d√©pendances du projet
          pip install -r dev-requirements.txt
          
          # Installation des outils de qualit√© de code
          pip install flake8 black isort mypy pytest pytest-cov pytest-xvfb safety bandit build wheel
          
          # V√©rification que tout est bien install√©
          echo "‚úÖ Environnement virtuel cr√©√© et configur√©"
          which python
          which pip
          python --version
        '''
      }
    }

    // √âtape 2: Qualit√© de code et tests
    stage('Quality & Test') {
      parallel {
        stage('Code Quality') {
          steps {
            sh '''
              # Activation de l'environnement virtuel
              . venv/bin/activate
              
              echo "üîç V√©rification du formatage avec Black..."
              black --check . || echo "‚ùå Code formatting issues found"
              
              echo "üîç V√©rification des imports avec isort..."
              isort --check-only . || echo "‚ùå Import sorting issues found"
              
              echo "üîç Analyse avec flake8..."
              flake8 . || echo "‚ùå Linting issues found"
              
              echo "üîç V√©rification des types avec mypy..."
              mypy . || echo "‚ùå Type checking issues found"
            '''
          }
          post {
            failure {
              emailext body: "Code quality checks failed in build ${env.BUILD_NUMBER}\n${env.BUILD_URL}",
                      subject: "FAILED: Code Quality - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                      to: "${TEAM_EMAIL}"
            }
          }
        }
        
        stage('Unit Tests') {
          steps {
            sh '''
              # Activation de l'environnement virtuel
              . venv/bin/activate
              
              echo "üß™ Ex√©cution des tests unitaires..."
              pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml
            '''
          }
          post {
            always {
              publishTestResults testResultsPattern: 'test-results.xml'
              publishCoverage adapters: [coberturaAdapter('coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
            }
            failure {
              emailext body: "Unit tests failed in build ${env.BUILD_NUMBER}\n${env.BUILD_URL}",
                      subject: "FAILED: Tests - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                      to: "${TEAM_EMAIL}"
            }
          }
        }
      }
    }

    // √âtape 3: Build et Package
    stage('Build & Package') {
      when { branch 'develop' }
      steps {
        sh '''
          # Activation de l'environnement virtuel
          . venv/bin/activate
          
          echo "üì¶ Construction du package Python..."
          python -m build
        '''
        archiveArtifacts artifacts: 'dist/*', fingerprint: true
      }
    }

    // √âtape 4: Security Scan
    stage('Security Scan') {
      when { branch 'develop' }
      steps {
        sh '''
          # Activation de l'environnement virtuel
          . venv/bin/activate
          
          echo "üîí Scan des vuln√©rabilit√©s des d√©pendances..."
          safety check || echo "‚ùå Security vulnerabilities found in dependencies"
          
          echo "üîí Scan de s√©curit√© du code..."
          bandit -r . -f json -o bandit-report.json || echo "‚ùå Security issues found in code"
        '''
      }
      post {
        always {
          archiveArtifacts artifacts: 'bandit-report.json', allowEmptyArchive: true
        }
      }
    }

    // √âtape 5: D√©ploiement Staging (simul√©)
    stage('Deploy to Staging') {
      when { branch 'develop' }
      steps {
        echo "üöÄ D√©ploiement simul√© sur staging"
        echo "Package: dist/*.whl"
      }
    }

    // √âtape 6: Validation manuelle
    stage('Approbation Production') {
      when { branch 'develop' }
      steps {
        input message: "D√©ployer en production?", ok: "Confirmer"
      }
    }

    // √âtape 7: D√©ploiement Production (simul√©)
    stage('Deploy to Production') {
      when { 
        anyOf { 
          branch 'main'
          expression { return true }
        }
      }
      steps {
        echo "üöÄ D√âPLOIEMENT PRODUCTION SIMUL√â"
        echo "Version: ${APP_NAME}:${BRANCH_NAME}-${BUILD_NUMBER}"
        echo "Artefact: dist/*.whl"
      }
    }
  }

  post {
    always {
      echo "‚úÖ Pipeline termin√©e"
      cleanWs()
    }
    success {
      echo "üëâ SUCC√àS: ${env.BUILD_URL}"
      emailext body: "Build Python r√©ussi!\n\nD√©tails: ${env.BUILD_URL}\nArtefacts: dist/*",
              subject: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
              to: "${TEAM_EMAIL}"
    }
    failure {
      echo "‚ùå √âCHEC: Veuillez v√©rifier les logs"
      emailext body: "√âchec du pipeline Python!\n\nConsulter les logs: ${env.BUILD_URL}",
              subject: "FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
              to: "${TEAM_EMAIL}"
    }
    unstable {
      echo "‚ö†Ô∏è Des tests sont instables"
      emailext body: "Pipeline Python instable (tests √©chou√©s)\n\nD√©tails: ${env.BUILD_URL}",
              subject: "UNSTABLE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
              to: "${TEAM_EMAIL}"
    }
  }
}